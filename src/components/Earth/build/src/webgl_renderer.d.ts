export class WebGLRenderer {
    constructor(canvas: any, renderState?: RenderState);
    canvas: any;
    gl: any;
    nextRender: (time: any) => void;
    afterRender: (renderState: any) => void;
    postponed: {}[];
    satelliteCount: number;
    cameraCount: number;
    stationCount: number;
    commsTotalCount: number;
    commsMaxCount: number;
    regionCount: number;
    meshCount: number;
    satGroup: any[];
    stationGroup: any[];
    regionGroup: any[];
    regionID: any[];
    regionCenter: any[];
    texture: {
        surface: any;
        earth: any;
        stars: any;
        bordr: any;
        milky: any;
        grid: any;
        moon: any;
        group: any;
        satPoint: any;
        satCoord: any;
        station: any;
        camera: any;
        capture: any;
        comms: any;
        object: any;
        region: any;
        polygon: any;
        picker: any;
    };
    textureIdx: {};
    buffer: {
        frame: {
            camera: any;
            main: any;
            region: any;
            satCoord: any;
            surface: any;
        };
        render: {
            color: any;
            depth: any;
        };
        uniform: any;
    };
    shader: {
        fade: any;
        moon: any;
        earth: any;
        orbit: any;
        object: any;
        region: any;
        capture: any;
        polygon: any;
        station: any;
        satLine: any;
        satView: any;
        satCoord: any;
        commsLine: any;
        commsPoint: any;
        satellite: any;
        satCapture: any;
        viewTriangle: any;
    };
    lastNow: number;
    frame: number;
    replaceTexture(which: any, withWhat: any): void;
    loadTextures(imagePath: any, minimal?: boolean): void;
    setSurfaceSize(surfaceWidth: any): void;
    surfaceW: any;
    surfaceH: number;
    replaceRenderState(renderState: any): void;
    terminate(): void;
    loadSatellites(webpImage: any): void;
    satSampleCount: number;
    satCoordWidth: number;
    satCoordHeight: number;
    groupSatellites(groupArray: any): void;
    regroupSatellite(satID: any, groupID: any): void;
    loadStations(stations: any): void;
    groupStations(groupArray: any): void;
    regroupStation(stationID: any, groupID: any): void;
    loadRegions(regions: any): void;
    groupRegions(groupArray: any): void;
    regroupRegion(regionID: any, groupID: any): void;
    loadCapture(webpImage: any): void;
    cameraImageWidth: number;
    cameraImageHeight: number;
    loadCommunications(webpImage: any): void;
    load3DObject(webpImage: any): void;
    render(time: any, renderState: any): void;
    actuallyRender(time: any, dt: any, rs: any): void;
    lastGroupData: Uint32Array;
}
import { RenderState } from "./render_state";
